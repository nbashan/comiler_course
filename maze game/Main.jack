class Main {
	function void main() {
		var int temp, temp2, mazeWidth, mazeHeight, xOrigin, yOrigin, bw, bh, padding, level;
        var Array maze, tempArr;
       	var Player player;
       	var PlayerController controller;
		
       	//maze width indicates number of blocks right to left
       	//maze height indicates number of blocks top to bottom

       	//Settings
       	let mazeWidth = 16; //number of columns
       	let mazeHeight = 8; //number of rows
       	let xOrigin = 8; 
       	let yOrigin = 8;
       	let bw = 31; //block width
       	let bh = 30; //block height
		let padding = 6;

	
		
		let level = 1; 
	
		while (level < 3) { //added loop to play again
			do Screen.setColor(true);
			do Output.moveCursor(11, 24);
			do Output.printString("level ");
			do Output.printInt(level);
			do Sys.wait(3000);
			do Screen.clearScreen();

			// create a 2 dimension array and set all values to 0
			let maze = Array.new(mazeHeight); //array of arrays
			let temp = 0;
			while(temp < mazeHeight){
				let maze[temp] = Array.new(mazeWidth);
				let temp2 = 0;
				while(temp2 < mazeWidth){
					let tempArr = maze[temp];
					let tempArr[temp2] = 0;
					let temp2 = temp2 + 1;
				}
				let temp = temp + 1;
			}


			do MazeGenerator.generate(maze, level);
			//Array maze, int originX, int originY, int blockWidth, int blockHeight, int xCount, int yCount
			do MazeDrawer.drawMaze(maze, xOrigin, yOrigin, bw, bh, mazeWidth, mazeHeight);
			let player = Player.new(0, 0); //starting point is top left

			let controller = PlayerController.new(player, maze, xOrigin, yOrigin,
			bw, bh, mazeWidth, mazeHeight, padding);

			do Main.drawEndPoint(xOrigin, yOrigin, bw, bh, mazeWidth, mazeHeight, 8);

			do controller.loop();

			do Screen.clearScreen();

			let level =level+1;
		}
		
		do Output.moveCursor(11, 24);
		do Output.printString("The End");		 
		return;
	}

	function void drawEndPoint(int baseX, int baseY, int bw, int bh, int xc, int yc, int rad){
		do Screen.setColor(true);
		do Screen.drawCircle(baseX + ((xc - 1) * bw) + (bw / 2),
			baseY + (bh / 2), rad);
		return;
	}

}