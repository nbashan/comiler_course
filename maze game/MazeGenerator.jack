class MazeGenerator {
	

	// Each array represents a row. Each integer represent a cell
	// The value of the cell is an integer which functions like an array of booleans
	// and represents the possible directions to go from the current cell.
	// bit 0, value-1, direction-up
	// bit 1, value-2, direction-down
	// bit 2, value-4, direction-right
	// bit 3, value-8, direction-left

	function void generate(Array grid, int level) {
		if (level = 1)  {
			do MazeGenerator.strToArray("ekgmommmoiemmmmk", grid[0]);
			do MazeGenerator.strToArray("cdfidgmonmkgmmml", grid[1]);
			do MazeGenerator.strToArray("fnkejdejgmpjemkd", grid[2]);
			do MazeGenerator.strToArray("emnmkhmkbgjgmkfl", grid[3]);
			do MazeGenerator.strToArray("gmoiddgnifidgnib", grid[4]);
			do MazeGenerator.strToArray("bgjgjbfmmmmlfmmk", grid[5]);
			do MazeGenerator.strToArray("epmnmmkgmmkbgmol", grid[6]);
			do MazeGenerator.strToArray("eniemmnnienmjejb", grid[7]);
		}
		else {
			do MazeGenerator.strToArray("emkgmommmkeomiek", grid[0]);
			do MazeGenerator.strToArray("giddejgmkfmlgmol", grid[1]);
			do MazeGenerator.strToArray("dgjfmmjgnienjejd", grid[2]);
			do MazeGenerator.strToArray("fnmmmkgjgmoiccgj", grid[3]);
			do MazeGenerator.strToArray("gmigidfmjgnifnni", grid[4]);
			do MazeGenerator.strToArray("hmmjgnmmkhigomoi", grid[5]);
			do MazeGenerator.strToArray("fmomleoidfmjbgnk", grid[6]);
			do MazeGenerator.strToArray("emnififmnmmmmjej", grid[7]);
		}
		return;
	}


	// converts char string to array of integers
	// a = 0 ,b = 1, c = 2 ...
	function void strToArray (String str, Array arr){
		var int len, i;
		var char tempChar;
		let len = str.length();

		let i=0;
		while (i<len){
			let arr[i] =str.charAt(i)-97;
			let i =i+1;
		}

		return;

	}

}